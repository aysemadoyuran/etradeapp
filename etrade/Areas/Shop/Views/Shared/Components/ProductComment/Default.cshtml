@model CommentViewModel

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="widget-content-inner">
                <div class="tab-reviews write-cancel-review-wrap">
                    <div class="tab-reviews-heading">
                        <div class="top">
                            <div class="text-center">
                                <div class="number title-display">@Model.AverageRating.ToString("0.0")</div>
                                <div class="list-star">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="icon icon-star @(i <= Model.AverageRating ? "" : "text-muted")"></i>
                                    }
                                </div>
                                <p>(@Model.TotalReviews Değerlendirme)</p>
                            </div>
                            <div class="rating-score">
                                @for (int i = 5; i >= 1; i--)
                                {
                                    <div class="item">
                                        <div class="number-1 text-caption-1">@i</div>
                                        <i class="icon icon-star"></i>
                                        <div class="line-bg">
                                            <div style="width: @(Model.TotalReviews > 0 ? (Model.StarCounts[i - 1] * 100 / Model.TotalReviews) : 0)%;"></div>
                                        </div>
                                        <div class="number-2 text-caption-1">@Model.StarCounts[i - 1]</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                @if (Model.Images.Any())
                {
                    <div class="comment-gallery">
                        <div class="gallery-thumbnails">
                            @for (int i = 0; i < Math.Min(Model.Images.Count, 9); i++)
                            {
                                <img src="@Model.Images[i]" class="gallery-thumbnail" onclick="openLightbox(@i)" />
                            }
                            @if (Model.Images.Count > 9)
                            {
                                <div class="more-images" onclick="openLightbox(9)">+@(Model.Images.Count - 9)</div>
                            }
                        </div>
                    </div>

                    <div id="lightbox" class="lightbox">
                        <span class="close" onclick="closeLightbox()">&times;</span>
                        <img class="lightbox-content" id="lightbox-img">
                        <a class="prev" onclick="changeImage(-1)">&#10094;</a>
                        <a class="next" onclick="changeImage(1)">&#10095;</a>
                    </div>
                }
                else
                {
                    <p class="text-center text-muted">Henüz fotoğraf eklenmedi.</p>
                }

                @foreach (var comment in Model.Comments)
                {
                    <div class="reply-comment-item border p-3 mb-3 rounded">
                        <div class="d-flex align-items-center">
                            <div class="image me-3">
                                <img src="/uploads/user.png" alt="@(comment.User?.UserName ?? "Anonim Kullanıcı")"
                                    class="rounded-circle profile-image" width="50">
                            </div>
                            <div>
                                <h6 class="mb-1">
                                    <a href="#" class="link">
                                        @(comment.User?.UserName.Length > 1 
                                            ? comment.User.UserName.Substring(0, 1) + new string('*', comment.User.UserName.Length - 1) 
                                            : "****")
                                    </a>
                                </h6>
                                <div class="list-star">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="icon icon-star @(i <= comment.Rating ? "" : "text-muted")"></i>
                                    }
                                </div>
                                <div class="text-secondary small">@comment.CreatedAt.ToString("dd MMM yyyy")</div>
                            </div>
                        </div>
                        <p class="text-secondary mt-2">@comment.Text</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    body.lightbox-open {
        overflow: hidden;
    }

    body.lightbox-open img:not(.lightbox-content) {
        opacity: 0.7; /* Diğer fotoğrafların opaklık değeri %30 */
        pointer-events: none; /* Tıklanabilirliği engelle */
    }

    .comment-gallery { margin-bottom: 20px; }
    .gallery-thumbnails { display: flex; flex-wrap: wrap; gap: 8px; }
    .gallery-thumbnail {
        width: 80px;
        height: 80px;
        object-fit: cover;
        cursor: pointer;
        border-radius: 5px;
    }
    .more-images {
        width: 80px;
        height: 80px;
        background: rgba(0, 0, 0, 0.6);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        cursor: pointer;
        border-radius: 5px;
    }
    .lightbox {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    .lightbox-content { max-width: 80%; max-height: 80%; }
    .close {
        position: absolute;
        top: 20px;
        right: 30px;
        font-size: 40px;
        color: white;
        cursor: pointer;
        z-index: 1001;
    }
    .prev, .next {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        font-size: 30px;
        color: white;
        cursor: pointer;
        z-index: 1001;
    }
    .prev { left: 20px; }
    .next { right: 20px; }
</style>

<script>
    var images = @Html.Raw(Json.Serialize(Model.Images));
    var currentIndex = 0;

    function openLightbox(index) {
        currentIndex = index;
        document.body.classList.add('lightbox-open'); // Body'ye sınıf ekle
        document.getElementById("lightbox").style.display = "flex";
        updateLightboxImage();
    }

    function closeLightbox() {
        document.body.classList.remove('lightbox-open'); // Body'den sınıfı kaldır
        document.getElementById("lightbox").style.display = "none";
    }

    function changeImage(step) {
        currentIndex = (currentIndex + step + images.length) % images.length;
        updateLightboxImage();
    }

    function updateLightboxImage() {
        document.getElementById("lightbox-img").src = images[currentIndex];
    }
</script>