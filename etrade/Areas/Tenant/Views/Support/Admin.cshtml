@{
    ViewData["Title"] = "Admin Destek Paneli";
}

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <h3>Bağlı Kullanıcılar</h3>
            <div id="connectedUsers" class="list-group"></div>
        </div>
        <div class="col-md-8">
            <h3>Sohbet</h3>
            <div id="chatContainer" style="display:none;">
                <div id="messageHistory" class="chat-history" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; margin-bottom: 10px;"></div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Mesajınızı yazın...">
                    <button id="sendButton" class="btn btn-primary">Gönder</button>
                </div>
            </div>
            <div id="noUserSelected" class="alert alert-info">
                Lütfen soldan bir kullanıcı seçin.
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let currentUserId = null;

        connection.on("UserConnected", (userId, tenant) => {
            const userElement = document.createElement("a");
            userElement.href = "#";
            userElement.className = "list-group-item list-group-item-action";
            userElement.id = `user-${userId}`;
            userElement.textContent = `${userId} (${tenant})`;
            userElement.onclick = () => selectUser(userId);
            
            document.getElementById("connectedUsers").appendChild(userElement);
        });

        connection.on("UserDisconnected", (userId) => {
            const element = document.getElementById(`user-${userId}`);
            if (element) {
                element.remove();
            }
            
            if (currentUserId === userId) {
                currentUserId = null;
                document.getElementById("chatContainer").style.display = "none";
                document.getElementById("noUserSelected").style.display = "block";
            }
        });

        connection.on("ReceiveMessageFromUser", (fromUserId, content, timestamp, tenant) => {
            if (currentUserId === fromUserId) {
                addMessageToChat(fromUserId, content, timestamp, false);
            }
        });

        async function selectUser(userId) {
            currentUserId = userId;
            document.getElementById("chatContainer").style.display = "block";
            document.getElementById("noUserSelected").style.display = "none";
            
            // Mesaj geçmişini yükle
            const messages = await connection.invoke("GetMessageHistory", userId);
            const messageHistory = document.getElementById("messageHistory");
            messageHistory.innerHTML = "";
            
            messages.forEach(msg => {
                const isAdminMessage = msg.fromUserId !== userId;
                addMessageToChat(msg.fromUserId, msg.content, msg.timestamp, isAdminMessage, false);
            });
            
            // Seçili kullanıcıyı vurgula
            document.querySelectorAll("#connectedUsers a").forEach(el => {
                el.classList.remove("active");
            });
            document.getElementById(`user-${userId}`).classList.add("active");
        }

        function addMessageToChat(userId, content, timestamp, isAdminMessage, scrollToBottom = true) {
            const messageElement = document.createElement("div");
            messageElement.className = `message ${isAdminMessage ? 'admin-message' : 'user-message'}`;
            
            const time = new Date(timestamp).toLocaleTimeString();
            messageElement.innerHTML = `<strong>${isAdminMessage ? 'Siz' : userId}</strong> (${time}): ${content}`;
            
            document.getElementById("messageHistory").appendChild(messageElement);
            
            if (scrollToBottom) {
                messageElement.scrollIntoView();
            }
        }

        document.getElementById("sendButton").addEventListener("click", async () => {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            
            if (message && currentUserId) {
                await connection.invoke("SendMessageToUser", currentUserId, message);
                addMessageToChat(currentUserId, message, new Date(), true);
                messageInput.value = "";
            }
        });

        document.getElementById("messageInput").addEventListener("keypress", async (e) => {
            if (e.key === "Enter") {
                document.getElementById("sendButton").click();
            }
        });

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
                await connection.invoke("RegisterAdmin");
            } catch (err) {
                console.log(err);
                setTimeout(startConnection, 5000);
            }
        }

        startConnection();
    </script>
}