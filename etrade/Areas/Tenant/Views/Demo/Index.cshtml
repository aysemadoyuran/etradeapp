@{
    ViewData["Title"] = "Demo Talepleri";
}

<div class="page-header">
    <div class="row align-items-center">
        <div class="col">
        </div>
        <div class="col-auto mb-3">
            <div class="input-group input-group-merge">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" id="searchInput" class="form-control" placeholder="Ara...">
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <div class="row justify-content-between align-items-center">
            <div class="col-auto">
                <h5 class="card-header-title">Tüm Demo Talepleri</h5>
            </div>
            <div class="col-auto">
                <div class="dropdown">
                    <button class="btn btn-white btn-sm dropdown-toggle" type="button" id="filterDropdown"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-filter me-2"></i>Filtrele
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                        <li><a class="dropdown-item filter-item" href="#" data-status="all">Tümü</a></li>
                        <li><a class="dropdown-item filter-item" href="#" data-status="pending">Bekleyenler</a></li>
                        <li><a class="dropdown-item filter-item" href="#" data-status="approved">Onaylananlar</a></li>
                        <li><a class="dropdown-item filter-item" href="#" data-status="rejected">Reddedilenler</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table id="demoRequestsTable" class="table table-hover table-nowrap">
                <thead class="table-light">
                    <tr>
                        <th scope="col" class="text-center">#</th>
                        <th scope="col">Kullanıcı</th>
                        <th scope="col">İletişim</th>
                        <th scope="col">Durum</th>
                        <th scope="col">Tarih Aralığı</th>
                        <th scope="col" class="text-end">Aksiyon</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Demo talepleri buraya yüklenecek -->
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <div class="text-muted">
                Toplam <span id="totalCount">0</span> kayıttan <span id="filteredCount">0</span> tanesi gösteriliyor
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination pagination-sm justify-content-end">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Önceki</a>
                    </li>
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                    <li class="page-item">
                        <a class="page-link" href="#">Sonraki</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<style>
    .status-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .status-approved {
        background-color: #d4edda;
        color: #155724;
    }

    .status-rejected {
        background-color: #f8d7da;
        color: #721c24;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #f0f2f5;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
    }

    .table-nowrap td,
    .table-nowrap th {
        white-space: nowrap;
    }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, .05);
    }
</style>

<script>
    // Demo taleplerini yükle
    async function loadDemoRequests() {
        try {
            const response = await fetch('/Tenant/Demo/GetDemoRequests');
            const demoRequests = await response.json();

            const tableBody = document.querySelector('#demoRequestsTable tbody');
            tableBody.innerHTML = ''; // Tabloyu temizle

            if (demoRequests.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-5">
                            <div class="text-muted">
                                <i class="bi bi-inbox" style="font-size: 2rem;"></i>
                                <p class="mt-2">Gösterilecek demo talebi bulunamadı</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            demoRequests.forEach(request => {
                // Durum badge'i için class belirle
                let statusClass = 'status-pending';
                if (request.requestStatus === 'approved') statusClass = 'status-approved';
                else if (request.requestStatus === 'rejected') statusClass = 'status-rejected';

                // Kullanıcı avatarı için baş harfler
                const nameParts = request.customerFullName.split(' ');
                const initials = nameParts.length > 1
                    ? nameParts[0].charAt(0) + nameParts[nameParts.length - 1].charAt(0)
                    : request.customerFullName.charAt(0);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="text-center">${request.id}</td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="user-avatar">
                                ${initials.toUpperCase()}
                            </div>
                            <div>
                                <h6 class="mb-0">${request.customerFullName}</h6>
                                <small class="text-muted">ID: ${request.id}</small>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>${request.customerEmail}</div>
                        <small class="text-muted">${request.customerPhone || 'Telefon yok'}</small>
                    </td>
                    <td>
                        <span class="status-badge ${statusClass}">${getStatusText(request.requestStatus)}</span>
                    </td>
                    <td>
                        ${request.demoStartDate ? formatDate(request.demoStartDate) : '—'} <br>
                        ${request.demoEndDate ? formatDate(request.demoEndDate) : '—'}
                    </td>
                    <td class="text-end">
                        <a class="btn btn-success btn-sm" href="/Tenant/Demo/Detail/${request.id}">İşlem Yap</a>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // Toplam kayıt sayısını güncelle
            document.getElementById('totalCount').textContent = demoRequests.length;
            document.getElementById('filteredCount').textContent = demoRequests.length;

        } catch (error) {
            console.error('Hata oluştu:', error);
            const tableBody = document.querySelector('#demoRequestsTable tbody');
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center py-5 text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Veriler yüklenirken bir hata oluştu
                    </td>
                </tr>
            `;
        }
    }

    function getStatusText(status) {
        const statusMap = {
            'pending': 'Beklemede',
            'approved': 'Onaylandı',
            'rejected': 'Reddedildi'
        };
        return statusMap[status] || status;
    }

    function formatDate(dateString) {
        if (!dateString) return '—';
        const options = { day: 'numeric', month: 'short', year: 'numeric' };
        return new Date(dateString).toLocaleDateString('tr-TR', options);
    }

    // Sayfa yüklendiğinde demo taleplerini yükle
    document.addEventListener('DOMContentLoaded', function () {
        loadDemoRequests();

        // Arama işlevselliği
        document.getElementById('searchInput').addEventListener('input', function (e) {
            const searchValue = e.target.value.toLowerCase();
            // Burada filtreleme yapılabilir
        });

        // Filtreleme işlevselliği
        document.querySelectorAll('.filter-item').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                const status = this.getAttribute('data-status');
                // Burada duruma göre filtreleme yapılabilir
            });
        });
    });
</script>